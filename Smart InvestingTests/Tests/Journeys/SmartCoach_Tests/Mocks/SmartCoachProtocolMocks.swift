//
//  SmartCoachProtocolMocks.swift
//  Smart InvestingTests
//
//  Created by Manju Kiran on 01/03/2021.
//

import UIKit
@testable import Smart_Investing

// Autogenerated via Sourcery & edited for purpose

class AchievementMockDataGenerator {
    
    static func generateOneAchievement() -> Achievement {
        let achievements = generateAchievements().achievements
        return achievements.first!
    }
    
    static func generateAchievements() -> AchievementsList {
        let decoder = JSONDecoder()
        return try! decoder.decode(AchievementsList.self,
                              from: Self.retreiveAchievementsData())
    }
    
    private static func retreiveAchievementsData() -> Data {
        let endpoint = DataFileNameEndpoint.achievements
        let fileUrl = try! FileURLGenerator().fileUrl(for: Bundle.main,
                                                      fileName: endpoint.urlString(),
                                                      withExtension: endpoint.fileExtension())
        return try! FileDataUtility().dataFromJSONFile(url: fileUrl)!
    }
    
    
}

// MARK: - Data Manager
class SmartCoachDataManagerProtocolMock: SmartCoachDataManagerProtocol {
    
    var dataManager: DataSyncManager {
        get { return underlyingDataManager }
        set(value) { underlyingDataManager = value }
    }

    var underlyingDataManager: DataSyncManager!

    // MARK: - loadAchievements

    var loadAchievementsCompletionCallsCount = 0
    var loadAchievementsCompletionCalled: Bool {
        return loadAchievementsCompletionCallsCount > 0
    }
    
    var shouldSucceedLoadAchievements = true
    func loadAchievements(completion: @escaping genericDataFetchHandler<AchievementsList>) {
        loadAchievementsCompletionCallsCount += 1
        completion(shouldSucceedLoadAchievements ?
                    .success(AchievementMockDataGenerator.generateAchievements())
                    : .failure(DownloadError.unknownError))
    }

    // MARK: - loadImage

    var loadImageUrlStringCompletionCallsCount = 0
    var loadImageUrlStringCompletionCalled: Bool {
        return loadImageUrlStringCompletionCallsCount > 0
    }

    var shouldSucceedLoadImage = true
    func loadImage(urlString: String, completion: @escaping imageHandler) {
        loadImageUrlStringCompletionCallsCount += 1
        completion(shouldSucceedLoadImage ?
                    .success(UIImage()) :
                    .failure(ImageError.invalidRequest))
    }

}

// MARK: - View
class SmartCoachViewProtocolMock: UIViewController, SmartCoachViewProtocol  {
    
    var presenter: SmartCoachPresenterProtocol?

    // MARK: - showAchievements

    var showAchievementsCallsCount = 0
    var showAchievementsCalled: Bool {
        return showAchievementsCallsCount > 0
    }
    var showAchievementsReceivedAchievements: AchievementsList?

    func showAchievements(_ achievements: AchievementsList) {
        showAchievementsCallsCount += 1
        showAchievementsReceivedAchievements = achievements
    }

    // MARK: - showError

    var showErrorCallsCount = 0
    var showErrorCalled: Bool {
        return showErrorCallsCount > 0
    }
    var showErrorReceivedError: Error?

    func showError(_ error: Error) {
        showErrorCallsCount += 1
        showErrorReceivedError = error
    }

}


// MARK: - Interactor
class SmartCoachInteractorProtocolMock: SmartCoachInteractorInputProtocol {
    
    var presenter: SmartCoachInteractorOutputProtocol?
    var dataManager: SmartCoachDataManagerProtocol?

    // MARK: - loadAchievements

    var loadAchievementsCallsCount = 0
    var loadAchievementsCalled: Bool {
        return loadAchievementsCallsCount > 0
    }
    var loadAchievementsClosure: (() -> Void)?

    func loadAchievements() {
        loadAchievementsCallsCount += 1
        loadAchievementsClosure?()
    }

    // MARK: - loadImage

    var loadImageUrlStringCompletionCallsCount = 0
    var loadImageUrlStringCompletionCalled: Bool {
        return loadImageUrlStringCompletionCallsCount > 0
    }

    var imageToReturnSuccess = true
    var imageToReturn: UIImage?
    func loadImage(urlString: String, completion: @escaping imageHandler) {
        loadImageUrlStringCompletionCallsCount += 1
        completion(imageToReturnSuccess ?
                    .success(imageToReturn ?? UIImage()) :
                    .failure(ImageError.invalidRequest))
    }
    
  }


// MARK: - Presenter
class SmartCoachPresenterProtocolMock: SmartCoachPresenterProtocol, SmartCoachInteractorOutputProtocol {
  
    var view: SmartCoachViewProtocol?
    var interactor: SmartCoachInteractorInputProtocol?
    var router: SmartCoachRouterProtocol?

    // MARK: - loadAchievements

    var loadAchievementsCallsCount = 0
    var loadAchievementsCalled: Bool {
        return loadAchievementsCallsCount > 0
    }
    var loadAchievementsClosure: (() -> Void)?

    func loadAchievements() {
        loadAchievementsCallsCount += 1
        loadAchievementsClosure?()
    }

    // MARK: - loadImage

    var loadImageUrlStringCompletionCallsCount = 0
    var loadImageUrlStringCompletionCalled: Bool {
        return loadImageUrlStringCompletionCallsCount > 0
    }

    var imageToReturnSuccess = true
    var imageToReturn: UIImage?

    func loadImage(urlString: String, completion: @escaping imageHandler) {
        loadImageUrlStringCompletionCallsCount += 1
        completion(imageToReturnSuccess ?
                    .success(imageToReturn ?? UIImage()) :
                    .failure(ImageError.invalidRequest))
    }

    // MARK: - presentDetailsForAchievement

    var presentDetailsForAchievementCallsCount = 0
    var presentDetailsForAchievementCalled: Bool {
        return presentDetailsForAchievementCallsCount > 0
    }
    var presentDetailsForAchievementReceivedAchievement: Achievement?


    func presentDetailsForAchievement(_ achievement: Achievement) {
        presentDetailsForAchievementCallsCount += 1
        presentDetailsForAchievementReceivedAchievement = achievement
    }
    
    // MARK: - didLoadAchievements

    var didLoadAchievementsCallsCount = 0
    var didLoadAchievementsCalled: Bool {
        return didLoadAchievementsCallsCount > 0
    }
    var didLoadAchievementsReceivedAchievements: AchievementsList?


    func didLoadAchievements(_ achievements: AchievementsList) {
        didLoadAchievementsCallsCount += 1
        didLoadAchievementsReceivedAchievements = achievements
    }

    // MARK: - failedToLoadAchievements

    var failedToLoadAchievementsWithCallsCount = 0
    var failedToLoadAchievementsWithCalled: Bool {
        return failedToLoadAchievementsWithCallsCount > 0
    }
    var failedToLoadAchievementsWithReceivedError: Error?

    func failedToLoadAchievements(with error: Error) {
        failedToLoadAchievementsWithCallsCount += 1
        failedToLoadAchievementsWithReceivedError = error
    }

}

// MARK: - Router
class SmartCoachRouterProtocolMock: SmartCoachRouterProtocol {


    // MARK: - presentSmartCoachModule

    static var presentSmartCoachModuleFromViewCallsCount = 0
    static var presentSmartCoachModuleFromViewCalled: Bool {
        return presentSmartCoachModuleFromViewCallsCount > 0
    }
    static var presentSmartCoachModuleFromViewReceivedSourceView: UIViewController?
    static var presentSmartCoachModuleWithModule: SmartCoachViewProtocol?

    
    static func presentSmartCoachModule(module: SmartCoachViewProtocol, fromView sourceView: UIViewController) {
        presentSmartCoachModuleFromViewCallsCount += 1
        presentSmartCoachModuleWithModule = module
        presentSmartCoachModuleFromViewReceivedSourceView = sourceView
    }
    
    static func createSmartCoachModule() -> SmartCoachViewProtocol {
        return SmartCoachViewProtocolMock()
    }
        
    // MARK: - presentDetailsForAchievement

    var presentDetailsForAchievementCallsCount = 0
    var presentDetailsForAchievementCalled: Bool {
        return presentDetailsForAchievementCallsCount > 0
    }
    var presentDetailsForAchievementReceivedAchievement: Achievement?
    
    func presentDetailsForAchievement(_ achievement: Achievement) {
        presentDetailsForAchievementCallsCount += 1
        presentDetailsForAchievementReceivedAchievement = achievement
    }

}

